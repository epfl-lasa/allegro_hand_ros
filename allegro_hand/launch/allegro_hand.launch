<launch>
    <!--
        Required arguments:
            HAND:=right|left
        Suggested arguments:
            ZEROS:=/path/to/zeros_file.yaml
            CONTROLLER:=grasp|pd|velsat|torque|sim
            RESPAWN:=true|false   Respawn controller if it dies.
            KEYBOARD:=true|false  (default is true)
            AUTO_CAN:=true|false  (if true, ignores CAN_DEVICE argument and finds the can device automagically).
            CAN_DEVICE:=/dev/pcanusb1 | /dev/pcanusbNNN  (ls -l /dev/pcan* to see open CAN devices)
            VISUALIZE:=true|false  (Launch rviz)
            JSP_GUI:=true|false  (If true, start a joint_state_publisher for commanded joint angles).
            GAZEBO:=true|false  (NOTE: Gazebo support is highly experimental at this point)

        This script launches the following nodes:
            - allegro hand controller (different controllers exist)
            - keyboard controller
            - state publisher (for TF information)

        NOTE: If you specify the can device manually (CAN_DEVICE:=/dev/pcanusbN),
            make sure you *also* specify AUTO_CAN:=false.

    -->


    <!-- The inclusion of which_hand in the zero.yaml file has been deprecated.
        Which hand (left/right) must now be specified as an argument when launching the Allegro Hand
        as an input for both the robot_description and for the grasping library controllers. -->
    <arg name="HAND"/>
    <arg name="GAZEBO" default="false"/>

    <!-- Select the robot -->
    <arg name="robot_name" default="allegro_hand_$(arg HAND)"/>

    <!-- Use the joint_state_publisher for *commanded* joint angles. -->
    <arg name="JSP_GUI" default="false"/>

    <!-- Visualization with rviz, only if arg VISUALIZE is set to true. Default is
        false, the allegro_viz.launch can be started separated. -->
    <arg name ="VISUALIZE" default="false" />

    <include if="$(arg VISUALIZE)"
        file="$(find allegro_hand)/launch/allegro_viz.launch">
        <arg name="robot_name" value="$(arg robot_name)"/>
    </include>

    <arg name="CONTROLLER" default="grasp"/> <!-- grasp, pd, velsat  -->
    <!-- Controllers include:
        -grasp *
        -pd
        -velsat
        -torque
        *The default controller is 'grasp' which employs the included grasping library (libBHand). -->

    <arg name="POLLING" default="true"/> <!-- true, false for polling the CAN communication -->

    <!-- ls -l /dev/pcan* to see your open CAN ports. Auto means find it
        automatically, and ignores the CAN_DEVICE argument. -->
    <arg name="AUTO_CAN" default="true" />
    <arg name="CAN_DEVICE" default="/dev/pcanusb1" />

    <arg name="PARAMS_DIR" default="$(find allegro_hand_parameters)" />
    <arg name="KEYBOARD" default="true" />

    <!-- yaml param files for your hand can be found in parameters/zero_files/ -->
    <arg name="ZEROS" default="$(arg PARAMS_DIR)/zero.yaml"/>

    <!--If true, respawn the controller if it dies. -->
    <arg name="RESPAWN" default="false"/>

    <!-- Select the gazebo controller -->
    <arg name="gazebo_controller" default="PositionController"/>

    <!-- Gazebo Client? -->
    <arg name="gzclient" default="false"/>
    <arg name="global_z" default="0"/>

    <!-- Select the hardware interface -->
    <arg if="$(eval (gazebo_controller == 'TorqueController')
             or (gazebo_controller == 'PositionTorqueController'))"
        name="hardware_interface"
        value="EffortJointInterface"/>
    <arg if="$(eval gazebo_controller == 'PositionController')"
        name="hardware_interface"
        value="PositionJointInterface"/>
    <arg unless="$(eval (gazebo_controller == 'TorqueController')
                 or (gazebo_controller == 'PositionTorqueController')
                 or (gazebo_controller == 'PositionController'))"
        name="hardware_interface" value="EffortJointInterface"
    />

    <!-- Upload allegro_hand URDF -->
    <include file="$(find allegro_hand_description)/launch/allegro_hand_upload.launch">
        <arg name="hardware_interface"  value="$(arg hardware_interface)"/>
        <arg name="robot_name"          value="$(arg robot_name)"/>
        <arg name="hand"                value="$(arg HAND)"/>
        <arg if="$(arg gzclient)" name="fix_to_world"        value="false"/>
    </include>

    <!-- Allegro Hand controller and communication node. -->
    <node ns="$(arg robot_name)" name="$(arg robot_name)"
        pkg="allegro_hand_controllers"
        type="allegro_node_$(arg CONTROLLER)"
        output="screen"
        clear_params="true"
        respawn="$(arg RESPAWN)"
        respawn_delay="2"
        args="$(arg POLLING)" >

        <!-- Remapping of topics into enumerated allegroHand_# namespace -->
        <remap from="allegroHand/joint_states" to="joint_states"/>
        <remap from="allegroHand/joint_cmd" to="joint_cmd"/>
        <remap from="allegroHand/lib_cmd" to="lib_cmd"/>
        <remap from="allegroHand/torque_cmd" to="torque_cmd"/>
        <remap from="allegroHand/envelop_torque" to="envelop_torque"/>
        <remap from="allegroHand/joint_current_states" to="joint_current_states"/>
        <remap from="allegroHand/joint_desired_states" to="joint_desired_states"/>

        <!--parameters are within the scope of the hand node so that multiple hands can be run at the same time -->
        <rosparam file="$(arg ZEROS)" command="load" />

        <rosparam file="$(arg PARAMS_DIR)/gains_pd.yaml" command="load" />
        <rosparam file="$(arg PARAMS_DIR)/gains_velSat.yaml" command="load" />
        <rosparam file="$(arg PARAMS_DIR)/initial_position.yaml" command="load" />

        <!-- Set the CAN channel automatically (using detect_pcan.py) if the
            AUTO_CAN parameter is true, otherwise use the CAN_DEVICE
            argument. NOTE: To manually set the can device, you must *also* set
            AUTO_CAN:=false. -->
        <param name="/comm/CAN_CH" value="$(arg CAN_DEVICE)"
            unless="$(arg AUTO_CAN)" />
        <param if="$(arg AUTO_CAN)" name="/comm/CAN_CH"
            command="$(find allegro_hand)/scripts/detect_pcan.py"/>

        <param name="/hand_info/which_hand" value="$(arg HAND)" /> <!-- See HAND arg above -->
    </node>

    <!-- NOTE: The joint_state_publisher is actually commanding *desired* joint
        angles. You can use the 'sim' controller to have a non-existent hand. -->
    <node if="$(arg JSP_GUI)"
        ns="$(arg robot_name)"
        name="joint_states"
        pkg="joint_state_publisher_gui"
        type="joint_state_publisher_gui">
        <remap from="joint_states" to="joint_cmd"/>
    </node>

    <!-- Joint States (angles) to Joint Transforms -->
    <node ns="$(arg robot_name)" name="jointState2tf"
        pkg="robot_state_publisher"
        type="state_publisher">
        <remap from="joint_states" to="joint_states"/>
        <remap from="robot_description" to="robot_description"/>
    </node>

    <!-- Keyboard handler (if arg KEYBOARD is true) -->
    <node ns="$(arg robot_name)" name="keyboard"
        pkg="allegro_hand_keyboard"
        type="allegro_hand_keyboard_node"
        output="screen"
        if="$(arg KEYBOARD)">
        <remap from="allegroHand/lib_cmd" to="lib_cmd"/>
    </node>

    <!-- Gazebo support is very experimental at the moment. -->
    <group if="$(arg GAZEBO)">
        <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
        <include unless="$(arg gzclient)"
            file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find allegro_hand_description)/worlds/allegro.world"/>
            <arg name="debug" value="false" />
            <arg name="paused" value="false"/>
            <arg name="use_sim_time" value="true"/>
            <arg name="gui" value="true" />
            <arg name="gui_required" value="true"/>
        </include>

        <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
        <node name="$(arg robot_name)_urdf_spawner" pkg="gazebo_ros"
            type="spawn_model" respawn="false" output="screen"
            args="-urdf -model $(arg robot_name) -param /$(arg robot_name)/robot_description
                  -z $(arg global_z)"
        />

        <!-- Spawn Gazebo Controllers -->
        <include file="$(find allegro_hand_controllers)/launch/allegro_hand_control.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="controller" value="$(arg gazebo_controller)"/>
        </include>
        
    </group>

</launch>
